In this project, we want to do some preliminary data mining of the prices of Apple stock. Your program will calculate the monthly average prices of Apple stock from 1984 to 2013.  A file of Apple's daily stock's prices will be given to you named table.csv. You can open the file by notepad or similar text editor, and it is comma delimited. If you open it with Excel, it shows you the data in a spreadsheet.

You must implement the following functions:

getInputDescriptor(): In this function, you are required to repeatedly prompt for the name of an input file until the user enters filename and the file can be opened for input. Return a file descriptor attached to the opened file.
getDataList(file_object, column_number): In this function, you are required to read the file of Apple's data. The function is flexible as it can read the data for any column of the data (1 through 6). If you read column 6, you are gathering the data for the "Adjusted Daily Close". If you read column 5, you are gathering data for the "Volume" that day. The function returns a list that consists of tuples. Each tuple is of the form: (date, column_data). For example: ('2013-02-08', 474.98) if we were collecting  data from column 6.
averageData(list_of_tuples): In this function, take in an argument that is the list of tuples generated by getDataList above. You will average the data for each month, and regenerate a list of tuples. A tuple here will have the form: (data_avg, date). For example: (2972945.4545454546, '07:1985') . Note the date does not contain a day any more.
outputAverage(filename, average): In this function, take in an argument that is the list of tuples generated by averageData above. You output the date and average data in the tuple to a file. The file name follows the naming convention ‘data_x.txt where ‘x’ is the column number. For example, the average data for column 1 will be data_1.txt. For your refernce, these files are attached to the assignment. Compare the output of your program with the attached files.
main(): In this function, you:
call getInputDescriptor to get a file descriptor
iterate through columns 1-6 to average
call the getDataList function
call the averageData function
call the OutputAverage
Files to Download:

table.csvPreview the document
data_1.txtPreview the document
data_2.txtPreview the document
data_3.txtPreview the document
data_4.txtPreview the document
data_5.txtPreview the document
data_6.txtPreview the document
Assignment Notes:

When reading the input file, you should be careful about the first line which does not contain any data.
Remember the split() function, which takes as an argument the character to split on, and returns a LIST of STRINGS
Since there are so many fields, do some testing (E.g. output some parsed data) to make sure that you get the correct data.
Remember to close your files after you have opened them
Example Output for data_1.txt

02:2013       458.46

01:2013       502.24

12:2012       534.54

11:2012       566.05

10:2012       640.86

09:2012       682.31

08:2012       640.36

07:2012       599.43

06:2012       574.49

05:2012       565.07

04:2012       610.23

03:2012       575.34

02:2012       492.34

01:2012       427.35

12:2011       392.23

11:2011       386.52

